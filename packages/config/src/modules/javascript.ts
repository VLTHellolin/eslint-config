import type { FlatConfigItem } from '@hellolin-eslint/shared';
import { memorize } from '@hellolin-eslint/shared';
import pluginStylistic from '@stylistic/eslint-plugin';
import pluginPerfectionist from 'eslint-plugin-perfectionist';
import * as pluginRegExp from 'eslint-plugin-regexp';
import globals from 'globals';

export interface JavaScriptOptions {
  /**
   * @default 'module'
   */
  sourceType?: 'module' | 'commonjs';
  /**
   * List of allowed `console` commands.
   * You will be able to use commands in this list without getting an error from ESLint.
   * @default ['warn', 'error']
   */
  allowConsoleCommands?: ('log' | 'info' | 'warn' | 'error')[];
  env?: {
    browser?: boolean;
    node?: boolean;
    greaseMonkey?: boolean;
  };
}

export const javascript = (options: JavaScriptOptions = {}): FlatConfigItem[] => {
  const {
    sourceType = 'module',
    allowConsoleCommands = ['warn', 'error'],
    env = {},
  } = options;

  return [
    {
      name: 'hellolin/javascript/base',
      languageOptions: {
        ecmaVersion: 2025,
        globals: {
          ...globals.es2025,
          ...(env.browser && globals.browser),
          ...(env.node && globals.node),
          ...(env.greaseMonkey && globals.greasemonkey),
          ...(env.browser && {
            document: 'readonly',
            navigator: 'readonly',
            window: 'readonly',
          }),
        },
        parserOptions: {
          ecmaVersion: 2025,
          ecmaFeatures: { jsx: true },
          sourceType,
        },
      },
      linterOptions: {
        reportUnusedDisableDirectives: true,
      },
      /// keep-sorted
      rules: {
        'accessor-pairs': 'warn',
        'array-callback-return': ['error', { allowImplicit: true }],
        'constructor-super': 'error',
        'default-case-last': 'error',
        'dot-notation': 'warn',
        'eqeqeq': ['error', 'smart'],
        'for-direction': 'error',
        'getter-return': 'error',
        'no-alert': 'error',
        'no-array-constructor': 'error',
        'no-async-promise-executor': 'error',
        'no-caller': 'error',
        'no-case-declarations': 'error',
        'no-class-assign': 'error',
        'no-compare-neg-zero': 'error',
        'no-cond-assign': 'error',
        'no-console': ['error', { allow: allowConsoleCommands }],
        'no-constant-binary-expression': 'error',
        'no-constant-condition': 'error',
        'no-control-regex': 'error',
        'no-debugger': 'error',
        'no-delete-var': 'error',
        'no-dupe-args': 'error',
        'no-dupe-class-members': 'error',
        'no-dupe-else-if': 'error',
        'no-dupe-keys': 'error',
        'no-duplicate-case': 'error',
        'no-empty-pattern': 'error',
        'no-empty': ['error', { allowEmptyCatch: true }],
        'no-ex-assign': 'error',
        'no-extra-bind': 'error',
        'no-extra-boolean-cast': 'error',
        'no-fallthrough': 'error',
        'no-func-assign': 'error',
        'no-global-assign': 'error',
        'no-implied-eval': 'error',
        'no-import-assign': 'error',
        'no-irregular-whitespace': 'error',
        'no-iterator': 'error',
        'no-labels': ['error', {
          allowLoop: false,
          allowSwitch: false,
        }],
        'no-lone-blocks': 'error',
        'no-lonely-if': 'error',
        'no-loss-of-precision': 'error',
        'no-misleading-character-class': 'error',
        'no-new-native-nonconstructor': 'error',
        'no-obj-calls': 'error',
        'no-prototype-builtins': 'error',
        'no-redeclare': ['error', { builtinGlobals: false }],
        'no-regex-spaces': 'error',
        'no-restricted-globals': [
          'error',
          {
            message: 'Use `globalThis` instead.',
            name: 'global',
          },
          {
            message: 'Use `globalThis` instead.',
            name: 'self',
          },
        ],
        'no-restricted-properties': [
          'error',
          {
            message: 'Use `Object.getPrototypeOf` or `Object.setPrototypeOf` instead.',
            property: '__proto__',
          },
          {
            message: 'Use `Object.defineProperty` instead.',
            property: '__defineGetter__',
          },
          {
            message: 'Use `Object.defineProperty` instead.',
            property: '__defineSetter__',
          },
          {
            message: 'Use `Object.getOwnPropertyDescriptor` instead.',
            property: '__lookupGetter__',
          },
          {
            message: 'Use `Object.getOwnPropertyDescriptor` instead.',
            property: '__lookupSetter__',
          },
        ],
        'no-restricted-syntax': [
          'error',
          'TSEnumDeclaration[const=true]',
          'TSExportAssignment',
        ],
        'no-self-assign': 'error',
        'no-self-compare': 'error',
        'no-sequences': 'error',
        'no-setter-return': 'error',
        'no-shadow-restricted-names': 'error',
        'no-sparse-arrays': 'warn',
        'no-template-curly-in-string': 'error',
        'no-this-before-super': 'error',
        'no-undef': 'error',
        'no-unexpected-multiline': 'error',
        'no-unmodified-loop-condition': 'error',
        'no-unreachable-loop': 'error',
        'no-unreachable': 'error',
        'no-unsafe-finally': 'error',
        'no-unsafe-negation': 'error',
        'no-unused-vars': 'error',
        'no-use-before-define': 'error',
        'no-useless-call': 'error',
        'no-useless-catch': 'error',
        'no-useless-computed-key': 'error',
        'no-useless-constructor': 'error',
        'no-useless-rename': 'error',
        'no-useless-return': 'error',
        'no-var': 'error',
        'no-with': 'error',
        'object-shorthand': [
          'error',
          'always',
          {
            avoidQuotes: true,
            ignoreConstructors: false,
          },
        ],
        'one-var': ['error', { initialized: 'never' }],
        'prefer-arrow-callback': [
          'error',
          {
            allowNamedFunctions: false,
            allowUnboundThis: true,
          },
        ],
        'prefer-const': [
          'error',
          {
            destructuring: 'all',
            ignoreReadBeforeAssign: true,
          },
        ],
        'prefer-exponentiation-operator': 'error',
        'prefer-promise-reject-errors': 'error',
        'prefer-regex-literals': 'error',
        'prefer-rest-params': 'error',
        'prefer-spread': 'error',
        'prefer-template': 'error',
        'symbol-description': 'error',
        'unicode-bom': ['error', 'never'],
        'use-isnan': 'error',
        'valid-typeof': ['error', { requireStringLiterals: true }],
        'vars-on-top': 'error',
        'yoda': ['error', 'never'],
      },
    },
    {
      name: 'hellolin/javascript/style',
      plugins: {
        perfectionist: memorize(pluginPerfectionist, 'eslint-plugin-perfectionist'),
        style: memorize(pluginStylistic, '@stylistic/eslint-plugin'),
      },
      /// keep-sorted
      rules: {
        'perfectionist/sort-exports': ['error', { type: 'natural' }],
        'perfectionist/sort-imports': ['error', {
          groups: [
            'type',
            ['parent-type', 'sibling-type', 'index-type', 'internal-type'],
            'builtin',
            'external',
            'internal',
            ['parent', 'sibling', 'index'],
            'side-effect',
            'object',
            'unknown',
          ],
          newlinesBetween: 'ignore',
          type: 'natural',
        }],
        'perfectionist/sort-named-exports': ['error', { type: 'natural' }],
        'perfectionist/sort-named-imports': ['error', { type: 'natural' }],
        'style/array-bracket-spacing': ['error', 'never'],
        'style/arrow-parens': ['error', 'as-needed'],
        'style/arrow-spacing': 'error',
        'style/block-spacing': 'error',
        'style/brace-style': ['error', '1tbs', { allowSingleLine: true }],
        'style/comma-dangle': ['error', 'always-multiline'],
        'style/comma-spacing': 'error',
        'style/comma-style': ['error', 'last'],
        'style/dot-location': ['error', 'property'],
        'style/eol-last': 'error',
        'style/function-call-argument-newline': ['error', 'consistent'],
        'style/function-call-spacing': ['error', 'never'],
        'style/function-paren-newline': ['error', 'consistent'],
        'style/generator-star-spacing': 'error',
        'style/indent-binary-ops': ['error', 2],
        'style/indent': ['error', 2, {
          SwitchCase: 1,
          VariableDeclarator: 'first',
          offsetTernaryExpressions: true,
          ignoreComments: false,
          ignoredNodes: [
            'TSUnionType',
            'TSIntersectionType',
            'TSTypeParameterInstantiation',
            'FunctionExpression > .params[decorators.length > 0]',
            'FunctionExpression > .params > :matches(Decorator, :not(:first-child))',
          ],
        }],
        'style/jsx-closing-bracket-location': ['error', 'tag-aligned'],
        'style/jsx-closing-tag-location': ['error', 'tag-aligned'],
        'style/jsx-equals-spacing': ['error', 'never'],
        'style/jsx-indent-props': ['error', 2],
        'style/jsx-pascal-case': ['warn', {
          allowNamespace: true,
          ignore: ['[A-Z]+'],
        }],
        'style/jsx-props-no-multi-spaces': 'error',
        'style/jsx-quotes': ['error', 'prefer-single'],
        'style/jsx-self-closing-comp': 'error',
        'style/jsx-tag-spacing': ['error', {
          beforeClosing: 'never',
          beforeSelfClosing: 'always',
        }],
        'style/key-spacing': 'error',
        'style/keyword-spacing': 'error',
        'style/member-delimiter-style': 'error',
        'style/no-extra-semi': 'error',
        'style/no-multi-spaces': 'error',
        'style/no-tabs': 'warn',
        'style/no-trailing-spaces': 'error',
        'style/no-whitespace-before-property': 'error',
        'style/object-curly-spacing': ['error', 'always'],
        'style/operator-linebreak': ['error', 'before'],
        'style/quote-props': ['error', 'consistent-as-needed'],
        'style/quotes': ['error', 'single'],
        'style/rest-spread-spacing': ['error', 'never'],
        'style/semi-spacing': 'error',
        'style/semi-style': 'error',
        'style/semi': 'error',
        'style/space-before-blocks': ['error', 'always'],
        'style/space-before-function-paren': ['error', { named: 'never' }],
        'style/space-unary-ops': 'error',
        'style/switch-colon-spacing': 'error',
        'style/type-annotation-spacing': 'error',
        'style/type-generic-spacing': 'error',
        'style/type-named-tuple-spacing': 'error',
        'style/yield-star-spacing': ['error', {
          before: true,
          after: false,
        }] },
    },
    {
      name: 'hellolin/javascript/regexp',
      plugins: {
        regexp: memorize(pluginRegExp, 'eslint-plugin-regexp'),
      },
      /// keep-sorted
      rules: {
        'regexp/confusing-quantifier': 'warn',
        'regexp/control-character-escape': 'error',
        'regexp/match-any': 'error',
        'regexp/negation': 'error',
        'regexp/no-contradiction-with-assertion': 'error',
        'regexp/no-dupe-characters-character-class': 'error',
        'regexp/no-dupe-disjunctions': 'error',
        'regexp/no-empty-alternative': 'warn',
        'regexp/no-empty-capturing-group': 'error',
        'regexp/no-empty-character-class': 'error',
        'regexp/no-empty-group': 'error',
        'regexp/no-empty-lookarounds-assertion': 'error',
        'regexp/no-empty-string-literal': 'error',
        'regexp/no-escape-backspace': 'error',
        'regexp/no-extra-lookaround-assertions': 'error',
        'regexp/no-invalid-regexp': 'error',
        'regexp/no-invisible-character': 'error',
        'regexp/no-lazy-ends': 'warn',
        'regexp/no-legacy-features': 'error',
        'regexp/no-misleading-capturing-group': 'error',
        'regexp/no-misleading-unicode-character': 'error',
        'regexp/no-missing-g-flag': 'error',
        'regexp/no-non-standard-flag': 'error',
        'regexp/no-obscure-range': 'error',
        'regexp/no-optional-assertion': 'error',
        'regexp/no-potentially-useless-backreference': 'warn',
        'regexp/no-super-linear-backtracking': 'error',
        'regexp/no-trivially-nested-assertion': 'error',
        'regexp/no-trivially-nested-quantifier': 'error',
        'regexp/no-unused-capturing-group': 'error',
        'regexp/no-useless-assertions': 'error',
        'regexp/no-useless-backreference': 'error',
        'regexp/no-useless-character-class': 'error',
        'regexp/no-useless-dollar-replacements': 'error',
        'regexp/no-useless-escape': 'error',
        'regexp/no-useless-flag': 'warn',
        'regexp/no-useless-lazy': 'error',
        'regexp/no-useless-non-capturing-group': 'error',
        'regexp/no-useless-quantifier': 'error',
        'regexp/no-useless-range': 'error',
        'regexp/no-useless-set-operand': 'error',
        'regexp/no-useless-string-literal': 'error',
        'regexp/no-useless-two-nums-quantifier': 'error',
        'regexp/no-zero-quantifier': 'error',
        'regexp/optimal-lookaround-quantifier': 'warn',
        'regexp/optimal-quantifier-concatenation': 'error',
        'regexp/prefer-character-class': 'error',
        'regexp/prefer-d': 'error',
        'regexp/prefer-plus-quantifier': 'error',
        'regexp/prefer-predefined-assertion': 'error',
        'regexp/prefer-question-quantifier': 'error',
        'regexp/prefer-range': 'error',
        'regexp/prefer-set-operation': 'error',
        'regexp/prefer-star-quantifier': 'error',
        'regexp/prefer-unicode-codepoint-escapes': 'error',
        'regexp/prefer-w': 'error',
        'regexp/simplify-set-operations': 'error',
        'regexp/sort-flags': 'error',
        'regexp/strict': 'error',
        'regexp/use-ignore-case': 'error',
      },
    },
  ];
};
